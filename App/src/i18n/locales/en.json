{
	"title": {
		"endOfAdventure": "eMush - End of the adventure!",
		"headline": "eMush - Cooperative multiplayer game: betrayal and survival in space!",
		"youAreDead": "eMush - You are dead!"
	},
	"alpha": {
		"homepage": "<em>eMush</em> is not currently open to the public as the game is not fully finished and is infested with <em class='red'>Mushs</em><em>!!!</em><br><br>If you are interested in the game, feel free to join us on <a href='https://discord.gg/ERc3svy'>Discord</a> and on the <a href='https://eternal-twin.net/forum'>Eternaltwin forums</a>. All information is available on <a href='https://eternal-twin.net'>Eternaltwin</a>.<br><br>About the eMush alpha, private ships are regularly being launched with the help of volunteers on <a href='https://discord.gg/ERc3svy'>Discord</a>. To be part of an alpha ship, you will have to register on <a href='https://eternal-twin.net'>Eternaltwin</a> and join the list of volunteers on <a href='https://discord.gg/ERc3svy'>Discord</a>.<br><br><em>If you are not shortlisted for an alpha ship, don't worry!</em> The selection list rotates for each ship to offer everyone a chance.",
		"valide": "Submit",
		"passphrase": "Alpha Password",
		"description": "This is an alpha for testers only.",
		"doors": "Doors",
		"inventory": "Inventory",
		"inventoryDescription": "Click here to open the Room Inventory",
		"equipment": "Equipment",
		"player": "Players",
		"issue": "Please report any encountered bugs on",
		"issue2": "or the"
	},
	"footer": {
		"alphaVersion": "Alpha Version",
		"crowdin": "You can help us translate the game on ",
		"developers": "Development",
		"coreTeam": "The eMush team:",
		"contributors": "Thanks to our contributors:",
		"translatorsAndAlphaTesters": "to our translators and all alpha testers :)",
		"emush": "eMush",
		"eternaltwin": "eMush is a non-commercial website operated by volunteers. It belongs to the <a href=https://eternaltwin.org/>Eternaltwin</a> project, whose purpose is to preserve Motion Twin's games. This means we want to ensure they remain available even if the official website closes. <strong>We are not related to Motion Twin</strong>.",
		"legal": "Legal notice",
		"report": "Report inappropriate behavior"
	},
	"util": {
		"prev": "Previous page",
		"next": "Next page",
		"goBack": "Back",
		"exit": "Exit"
	},
	"banner": {
		"ranking": "Rankings",
		"user": "My account",
		"news": "News",
		"forum": "Forum",
		"admin": "Admin",
		"moderation": "Moderation"
	},
	"ranking": {
		"ship_end_cause": "End cause",
		"daysSurvived": "Days survived",
		"cyclesSurvived": "Cycles survived",
		"playerRankingSubMenu": "Players",
		"shipRankingSubMenu": "Daedalus",
		"linkToTheEnd": "Daedalus",
		"goToTheEnd": "Honours List",
		"languages": "Daedalus language",
		"all": "All ships",
		"french": "French ships",
		"english": "English ships",
		"endCause": {
			"sol_return": "Daedalus returned to Sol",
			"eden": "Daedalus has settled on Eden",
			"daedalus_destroyed": "Daedalus destroyed",
			"killed_by_neron": "Contaminated crew assassinated by NERON",
			"super_nova": "Supernova"
		}
	},
	"theEnd": {
		"headliner": "Starring role :",
		"mainRoles": "Supporting roles :",
		"figurantPlayers": "Featuring :",
		"goldSuperNova": "Golden Supernova Award",
		"silverSuperNova": "Supernova of Excellence Award",
		"bronzeSuperNova": "Honorable Supernova Award",
		"discoveredSuperNova": "Discovered Supernova Award",
		"specialSuperNova": "Special Nova Award",
		"normalSuperNova": "Prize Nova",
		"numberOfHuntersKilled": "Hunters shot down",
		"amountOfMushPlayers": "Number of Mushs",
		"endCause": {
			"sol_return": "The Daedalus returned to Sol!",
			"eden": "The Daedalus has settled on Eden!",
			"daedalus_destroyed": "Your corpse is floating amongst the debris of the pulverized Daedalus!",
			"killed_by_neron": "On the way to the infinite void!",
			"super_nova": "Death by impish administrator!",
			"alien_abducted": "You have been abducted.",
			"assassinated": "Assassinated by a crewmate!",
			"depression": "You put an end to it all...",
			"asphyxia": "Dead on the Daedalus through lack of oxygen!",
			"abandoned": "Abandoned by the Daedalus to take your chances alone!",
			"allergy": "Cuddle with an allergen!",
			"self_extracted": "Your guts needed some fresh air!",
			"exploration": "Killed in an accident in an alien world!",
			"exploration_combat": "Destroyed by an alien with a headache!",
			"exploration_lost": "Something found you before your crewmates did!",
			"electrocuted": "Electrocuted by this old piece of junk!",
			"injury": "Injured to death!",
			"burnt": "Burnt out by an untimely fire!",
			"clumsiness": "So badly in fact that you've achieved nothing at all...",
			"space_battle": "Died from your vessel exploding in a spacecraft shoot-out!",
			"space_asphyxiated": "Dead, abandoned in infinite space!",
			"beheaded": "Beheaded by a coward!",
			"starvation": "Starved to death!",
			"quarantine": "Quarantined by NERON",
			"black_bite": "Succumbed to an alien disease!",
			"metal_plate": "Another victim claimed by the old Daed-shed!",
			"rocketed": "Scattered by an inquisitive missile!",
			"bled": "Bled out!",
			"infection": "Succumbed to a massive infection!",
			"mankarog": "Killed by a crafty Mankarog!",
			"no_infirmerie": "Death lost in infinite space!",
			"suicide": "Suicide with panache!",
			"patrol_ship_explosion": "A failed maneuver!"
		},
		"historyAndTriumph": "History and Glory",
		"historyAndTriumphDescription": "Click here the history and the glory of **{character}**.",
		"triumph": "Glory"
	},
	"userBanner": {
		"userShips": "File"
	},
	"userShips": {
		"pageTitle": "'s file",
		"character": "Character",
		"daysSurvived": "Days survived",
		"cyclesSurvived": "Survived cycles",
		"linkToTheEnd": "Daedalus",
		"goToTheEnd": "Honours List",
		"endCauses": "End cause",
		"endCause": {
			"sol_return": "Daedalus returned to Sol",
			"eden": "Daedalus has settled on Eden",
			"daedalus_destroyed": "Daedalus destroyed",
			"killed_by_neron": "Assassinated by NERON",
			"super_nova": "Supernova",
			"alien_abducted": "Kidnapped by a superior race",
			"assassinated": "Assassinated",
			"depression": "Fatal Depression",
			"asphyxia": "Oxygen Stocks Exhausted",
			"abandoned": "Abandoned",
			"allergy": "Allergy",
			"self_extracted": "Self-Extracted",
			"exploration": "Unfortunate adventurer",
			"exploration_combat": "Not cut out for combat",
			"exploration_lost": "Lost explorer",
			"electrocuted": "Electrocuted",
			"injury": "Injuries",
			"burnt": "Burned",
			"clumsiness": "Putting the 'fun' in funeral",
			"space_battle": "Space combat",
			"space_asphyxiated": "In space without being able to breathe...",
			"beheaded": "Beheaded",
			"starvation": "Starvation",
			"quarantine": "Quarantined by NERON",
			"black_bite": "Black Bite",
			"metal_plate": "Steel Plated",
			"rocketed": "Rocketed",
			"bled": "Bled Out",
			"infection": "Sepsis",
			"mankarog": "Overly curious adventurer",
			"no_infirmerie": "No medlab available",
			"suicide": "Suicide",
			"patrol_ship_explosion": "Pulverized patrol ship"
		}
	},
	"login": "Login",
	"logout": "Logout",
	"deathpage": {
		"name": "Name",
		"death": "Death",
		"reason": "Reason",
		"like": "Like",
		"notyet": "You will be notified when the end game ranking is published.",
		"endgame": "Confirm and continue",
		"highlights": "Highlights",
		"triumphHistory": "Glory history",
		"epitaphPlaceholder": "Leave your thoughts on the game here!",
		"readMore": "Read more...",
		"readLess": "Read less..."
	},
	"alerts": "Alerts:",
	"downloading": "Downloading...",
	"loading": "Loading...",
	"room": {
		"bridge": "Bridge",
		"alphaBay": "Alpha Bay",
		"bravoBay": "Bravo Bay",
		"alphaBay2": "Alpha Bay 2",
		"nexus": "Nexus",
		"medlab": "Medlab",
		"laboratory": "Laboratory",
		"refectory": "Refectory",
		"hydroponicGarden": "Hydroponic Garden",
		"engineRoom": "Engine Room",
		"frontAlphaTurret": "Front Alpha Turret",
		"centreAlphaTurret": "Center Alpha Turret",
		"rearAlphaTurret": "Rear Alpha Turret",
		"frontBravoTurret": "Front Bravo Turret",
		"centreBravoTurret": "Center Bravo Turret",
		"rearBravoTurret": "Rear Bravo Turret",
		"frontCorridor": "Front Corridor",
		"centralCorridor": "Central Corridor",
		"rearCorridor": "Rear Corridor",
		"icarusBay": "Icarus Bay",
		"alphaDorm": "Alpha Dorm",
		"bravoDorm": "Bravo Dorm",
		"frontStorage": "Front Storage",
		"centerAlphaStorage": "Center Alpha Storage",
		"centerBravoStorage": "Center Bravo Storage",
		"rearAlphaStorage": "Rear Alpha Storage",
		"rearBravoStorage": "Rear Bravo Storage"
	},
	"admin": {
		"actions": {
			"equipment": {
				"title": "Equipment",
				"create": "Create equipment for ongoing Daedaluses",
				"name": "Equipment name",
				"quantity": "Quantity",
				"place": "Room in which to create equipment",
				"daedalus": "Daedalus identifier",
				"createForDaedalus": "Creating equipment for the Daedalus"
			},
			"projects": {
				"title": "Projects",
				"create": "Create projects for ongoing Daedaluses",
				"propose": "Propose projects for ongoing Daedaluses"
			},
			"statuses": {
				"title": "Status",
				"createAllPlayersInitStatuses": "Create starting statuses for all players",
				"deleteAllByName": "Delete all status with this name",
				"name": "Name"
			},
			"rules": {
				"title": "Rules",
				"resetAcceptance": "Reset rule acceptance for all users"
			},
			"title": "Administrative actions"
		},
		"banner": {
			"actions": "Actions"
		},
		"user": {
			"username": "Username",
			"roles": "Roles"
		},
		"gameConfig": {
			"name": "Name",
			"daedalusConfig": "Daedalus config",
			"difficultyConfig": "Difficulty config",
			"characterConfigs": "Characters",
			"statusConfigs": "Statuses",
			"equipmentConfigs": "Equipment",
			"triumphConfigs": "Triumph configs",
			"diseaseCauseConfigs": "Disease causes configuration",
			"diseaseConfigs": "Diseases configuration",
			"consumableDiseaseConfigs": "Consumable disease configs"
		},
		"modifierConfig": {
			"name": "Name",
			"delta": "Delta",
			"targetVariable": "Target variable",
			"targetEvent": "Trigger event",
			"modifierHolderClass": "Modifier holder entity",
			"mode": "Calculation Mode",
			"variableModifier": "Variable modifier",
			"triggerEventModifier": "Event trigger",
			"preventEventModifier": "Event inhibitor",
			"modifierRequirement": "Activation conditions",
			"triggeredEvent": "Triggered event",
			"replaceEvent": "Replace initial event",
			"applyOnActionParameter": "Apply only on action target",
			"modifierRange": "Modifier range",
			"revertOnRemove": "Revert on remove",
			"tagConstraints": "Tag constraints",
			"directModifier": "Direct modifier",
			"modifierName": "Modifier name",
			"eventModifier": "All modifier events",
			"priority": "Application priority",
			"modifierStrategy": "Modifier strategy"
		},
		"eventConfig": {
			"name": "Name",
			"eventName": "Event name",
			"quantity": "Quantity",
			"targetVariable": "Target variable",
			"variableHolderClass": "Variable holder entity"
		},
		"modifierActivationRequirement": {
			"name": "Name",
			"activationRequirementName": "Activation requirement type",
			"activationRequirement": "Activation requirement",
			"value": "Activation probability"
		},
		"statusConfig": {
			"name": "Name",
			"visibility": "Visibility",
			"chargeVisibility": "Charges Visibility",
			"chargeStrategy": "Charge Mode",
			"dischargeStrategies": "Discharge strategies",
			"maxCharge": "Maximum charges amount",
			"startCharge": "Initial charges amount"
		},
		"actionConfig": {
			"name": "Complete name",
			"actionName": "Name",
			"target": "Target",
			"types": "Types",
			"scope": "Scope",
			"successRate": "Success rate",
			"injuryRate": "Clumsiness rate",
			"dirtyRate": "Dirty rate",
			"actionPoint": "Action point cost",
			"movementPoint": "Movement point cost",
			"moralPoint": "Morale point cost",
			"percentageSuccess": "Success rate",
			"percentageCritical": "Critical success rate",
			"percentageInjury": "Clumsiness rate",
			"percentageDirtiness": "Dirty rate",
			"isSuperDirty": "Is super dirty",
			"isNotSuperDirty": "Is not super dirty"
		},
		"daedalus": {
			"addNewRooms": "Add rooms",
			"deleteDuplicatedAlertElements": "Delete alert elements",
			"destroy": "Destroy",
			"destroyAllDaedaluses": "Destroy all Daedaluses",
			"unlock": "Unlock cycle change",
			"createDaedalus": "Create a Daedalus",
			"name": "Daedalus name :",
			"create": "Create a Daedalus",
			"config": "Configuration of the daedalus",
			"language": "Daedalus language",
			"maintenanceOn": "Put the game into maintenance",
			"maintenanceOff": "Remove game from maintenance"
		},
		"save": "Save",
		"show": "Show",
		"search": "Search",
		"edit": "Edit",
		"updatedAt": "Updated at",
		"class": "Entity type",
		"daedalusConfig": {
			"name": "Name",
			"initOxygen": "Initial Oxygen",
			"initFuel": "Initial Fuel",
			"initHull": "Initial Hull",
			"initShield": "Initial Shield",
			"dailySporeNb": "Daily amount of Spores",
			"maxOxygen": "Maximal Oxygen",
			"maxFuel": "Maximal Fuel",
			"maxHull": "Maximal Armor",
			"maxShield": "Maximal Shield",
			"nbMush": "Initial number of Mushs",
			"cyclePerGameDay": "Number of cycles per day",
			"cycleLength": "Cycle length (in minutes)",
			"placeConfigs": "Rooms"
		},
		"difficultyConfig": {
			"name": "Name",
			"equipmentBreakRate": "Equipment break rate at cycle change",
			"doorBreakRate": "Door break rate at cycle change",
			"equipmentFireBreakRate": "Equipment break rate by fires",
			"startingFireRate": "Starting fire rate at cycle change",
			"propagatingFireRate": "Fire propagating rate",
			"hullFireDamageRate": "Fire damage rate to hull",
			"tremorRate": "Tremor rate",
			"electricArcRate": "Electric arc rate",
			"metalPlateRate": "Metal plate rate",
			"panicCrisisRate": "Panic attack rate",
			"plantDiseaseRate": "Disease rate at cycle change (plants)",
			"cycleDiseaseRate": "Disease rate at cycle change (players)",
			"firePlayerDamage": "Fire damage on players (damage => probability)",
			"fireHullDamage": "Fire damage on hull (damage => probability)",
			"electricArcPlayerDamage": "Electric arc damage on players (damage => probability)",
			"tremorPlayerDamage": "Tremor damage on players (damage => probability)",
			"metalPlatePlayerDamage": "Metal plate damage on players (damage => probability)",
			"panicCrisisPlayerDamage": "Panic attack damage on players (damage => probability)",
			"difficultyModes": "Difficulty modes (name => day triggered)",
			"hunterSpawnRate": "Hunter spawn rate at cycle change",
			"hunterSafeCycles": "Cycles when no hunter can spawn",
			"startingHuntersTruceCycles": "Cycles at the beginning of the game with no new hunters spawning"
		},
		"characterConfig": {
			"name": "Name",
			"characterName": "Character name",
			"maxNumberPrivateChannel": "Maximum amount of private channels",
			"initHealthPoint": "Initial Health Points",
			"initMovementPoint": "Initial Movement Points",
			"initMoralPoint": "Initial Moral Points amount",
			"initActionPoint": "Initial Action Points amount",
			"initSatiety": "Initial satiety",
			"maxActionPoint": "Maximum Action Points amount",
			"maxMovementPoint": "Maximum Movement Points amount",
			"maxMoralPoint": "Maximum Moral Points amount",
			"maxHealthPoint": "Maximum Health Points amount",
			"maxItemInInventory": "Maximum amount of items in inventory",
			"initStatuses": "Initial statuses",
			"actions": "Actions",
			"skills": "Skills",
			"startingItems": "Starting items",
			"initDiseases": "Initial diseases"
		},
		"diseaseConfig": {
			"pageTitle": "Modification of the disease ",
			"name": "Complete name",
			"diseaseName": "Disease name",
			"type": "Type",
			"resistance": "Resistance",
			"delayMin": "Number of cycles before activation",
			"delayLength": "Number of cycles of incubation after activation",
			"diseasePointMin": "Minimum disease points amount",
			"diseasePointLength": "Maximum disease points amount",
			"override": "Overriden disease",
			"overrideDiseaseToAdd": "Disease to add :",
			"modifierConfigs": "Modifiers",
			"symptomConfigs": "Symptoms"
		},
		"symptomConfig": {
			"pageTitle": "Modification of the symptom ",
			"name": "Complete name",
			"symptomName": "Name",
			"trigger": "Trigger",
			"visibility": "Visibility",
			"symptomActivationRequirements": "Activation requirements"
		},
		"symptomActivationRequirement": {
			"pageTitle": "Modification of the activation requirement ",
			"activationRequirementName": "Activation requirement type",
			"name": "Full name",
			"activationRequirement": "Activation requirement",
			"value": "Activation probability"
		},
		"equipmentConfig": {
			"pageTitle": "Modification of the piece of equipment ",
			"name": "Complete name",
			"equipmentName": "Name",
			"breakableType": "Breakable type",
			"none": "Unbreakable",
			"breakable": "Breakable",
			"destroyOnBreak": "Destroy on break",
			"isPersonal": "Is personal",
			"isNotPersonal": "Is not personal",
			"dismountedProducts": "Items given when dismantled",
			"addDismountedProducts": "Add an item :",
			"isStackable": "Stackable",
			"isNotStackable": "Not stackable",
			"actions": "Actions",
			"initStatuses": "Statuses",
			"mechanics": "Mechanics"
		},
		"placeConfig": {
			"pageTitle": "Modification of the room ",
			"name": "Complete name",
			"placeName": "Room name",
			"type": "Room type",
			"doors": "Doors",
			"equipments": "Equipment",
			"items": "Items"
		},
		"randomItemPlaces": {
			"pageTitle": "Modification of the random repartition of items in the rooms ",
			"name": "Name",
			"items": "Items",
			"places": "Rooms"
		},
		"mechanics": {
			"pageTitle": "Modification of the mechanics ",
			"name": "Name",
			"mechanics": "Mechanics",
			"mechanicsType": "Mechanics type",
			"actions": "Actions",
			"maturationTime": "Maturation time (number of cycles => probability)",
			"addMaturationTime": "Delete a maturation time :",
			"maturationTimeIndexToAdd": "Maturation time to add :",
			"maturationTimeValueToAdd": "Probability of the maturation time :",
			"oxygen": "Oxygen given per day (number of oxygen => probability)",
			"baseAccuracy": "Success rate",
			"baseDamageRange": "Damage (number of health points => probability)",
			"expeditionBonus": "Expedition bonus",
			"criticalSuccessRate": "Critical success rate",
			"criticalFailRate": "Critical fail rate",
			"oneShotRate": "One shot rate",
			"ingredients": "Ingredients",
			"addIngredients": "Add an ingredient :",
			"isPerishable": "Is perishable",
			"isNotPerishable": "Is not perishable",
			"satiety": "Satiety",
			"actionPoints": "Action points earned (points => probabilité)",
			"moralPoints": "Morale points earned (points => probabilité)",
			"healthPoints": "Health points earned (points => probabilité)",
			"movementPoints": "Movement point gagnés (points => probabilité)",
			"extraEffects": "Extra effects",
			"skill": "Learned skill",
			"content": "Content",
			"isTranslated": "Is translated",
			"isNotTranslated": "Is not translated",
			"canShred": "Can be shred",
			"cannotShred": "Cannot be shred",
			"modifierConfigs": "Modifiers",
			"equipment": "Built piece of equipment",
			"blueprint": "Blueprints",
			"dockingPlace": "Docking room",
			"collectScrapNumber": "Amount of scrap obtain for each action Collect (amount => probability)",
			"collectScrapPatrolShipDamage": "Damage inflicted on the patroller with each Harvest action (number => probability)",
			"collectScrapPlayerDamage": "Damage to player for each action Collect (amount => probability)",
			"failedManoeuvreDaedalusDamage": "Damage to the Daedalus if the maneuver fails (value => probability)",
			"failedManoeuvrePatrolShipDamage": "Damage to the Patrol ship if the maneuver fails (value => probability)",
			"failedManoeuvrePlayerDamage": "Damage to the player if the maneuver fails (value => probability)",
			"book": "Mage Books",
			"document": "Documents",
			"drug": "Drugs",
			"fruit": "Fruits",
			"gear": "Gear",
			"plant": "Plants",
			"ration": "Food",
			"weapon": "Weapons",
			"patrolShip": "Patrol ships"
		},
		"buttons": {
			"add": "Add",
			"delete": "Delete",
			"updateConfig": "Update the configuration",
			"createNewConfig": "Create a new configuration"
		},
		"childManager": {
			"idToAdd": "ID to add : "
		},
		"childCollectionManager": {
			"idToAdd": "ID to add : "
		},
		"mapManager": {
			"indexToDelete": "Key to delete :",
			"mapIndexToAdd": "Key to add : ",
			"mapValueToAdd": "Value to add:"
		},
		"stringArrayManager": {
			"elementToAdd": "Element to add : "
		},
		"consumableDiseaseConfig": {
			"pageTitle": "Modification of the diseases given/healed by the consumable ",
			"curesName": "Diseases cured (disease => probability of being chosen)",
			"diseasesName": "Diseases given (disease => probability of being chosen)",
			"diseasesChances": "Probability of giving a disease (probability => probability of being chosen)",
			"curesChances": "Probability of curing a disease (probability => probability of being chosen)",
			"diseasesDelayMin": "Minimum number of cycles of incubation (number of cycles => probability of being chosen)",
			"diseasesDelayLength": "Maximum number of cycles of incubation (number of cycles => probability of being chosen)",
			"effectNumber": "Number of effects (number of effects => probability of being chosen)"
		},
		"triumphConfig": {
			"pageTitle": "Modification of the triumph ",
			"name": "Name",
			"triumph": "Earned triumph",
			"isAllCrew": "Earned by all crew",
			"isNotAllCrew": "Non earned by all crew",
			"team": "Team"
		},
		"newsList": {
			"create": "Write a news",
			"newsTitle": "Title",
			"updatedAt": "Last update",
			"publicationDate": "Published at"
		},
		"newsWrite": {
			"frenchTitle": "French title",
			"frenchContent": "French content",
			"englishContent": "English content",
			"englishTitle": "English title",
			"spanishTitle": "Spanish title",
			"spanishContent": "Spanish content",
			"publicationDate": "Publication date",
			"isPinned": "Pin the news"
		},
		"hunterConfig": {
			"name": "Full Name",
			"hunterName": "Name",
			"initialHealth": "Initial health",
			"damageRange": "Damage (HP lost => probability)",
			"hitChance": "Chance to hit",
			"dodgeChance": "Change to dodge",
			"drawCost": "Cost to draw",
			"maxPerWave": "Maximum per wave (empty = infinity)",
			"drawWeight": "Probability (weight) to be drawn at each wave",
			"initialStatuses": "Initial status",
			"scrapDropTable": "Drop table upon dying (scrap => probability)",
			"spawnDifficulty": "First day spawned",
			"numberOfDroppedScrap": "Amount of scrap dropped upon dying (amount => probability)",
			"bonusAfterFailedShot": "Accuracy bonus after a failed shot",
			"numberOfActionsPerCycle": "Number of actions each cycle"
		},
		"playerList": {
			"closeAllPlayers": "Close (archive) all players",
			"closePlayer": "Close (archive) this player",
			"quarantine": "Put in quarantine"
		},
		"neronAnnouncement": {
			"destroyAndUpdate": "Destruction and update",
			"destroyAndUpdateContent": "**Alert**: Daedalus is doomed to imminent destruction. Indeed, the almighty developers have planned a major **game update**. *Get ready for creative new ways to meet your end!*",
			"maintenance": "Maintenance",
			"maintenanceContent": "Dear crew, get ready for **game maintenance** in *1 cycle*. Use this time to contemplate the existential void or reflect on your life choices: *the fun will continue after the technical break... Or not*.",
			"frenchAnnouncement": "French announcement",
			"englishAnnouncement": "English announcement",
			"sendNeronAnnouncement": "Send a NERON announcement",
			"sendNeronAnnouncementToAllDaedaluses": "Send a NERON announcement to all Daedalus"
		}
	},
	"charSelection": {
		"selectLanguage": "Select a language to join a game 👉",
		"shipNotFound": "No ship was found. One should be created in the incoming hour!",
		"startGame": "Start the game",
		"youChoose": "You choose ",
		"moreInfo": "Move the mouse over the portraits to see a detailed description of the characters."
	},
	"game": {
		"communications": {
			"day": "Day",
			"cycle": "Cycle",
			"showMessageChildren": "Display {count} answer | Display {count} answers",
			"hideMessageChildren": "Hide {count} answer | Hide {count} answers",
			"newCycle": "New cycle",
			"myMessageHere": "My message here!",
			"messageInputAdvanced": "Advanced editor",
			"messageInputAdvancedDescription": "Use an advanced editor to format your messages",
			"boldButtonTitle": "B",
			"boldButtonDescription": "Bold",
			"italicButtonTitle": "I",
			"italicButtonDescription": "Italic",
			"boldItalicButtonTitle": "G+I",
			"boldItalicButtonDescription": "Bold and italic",
			"eraseButtonTitle": "🧹",
			"eraseButtonDescription": "Clear formatting",
			"strikeButtonTitle": "B",
			"strikeButtonDescription": "Strike",
			"charactersButtonTitle": "👤",
			"charactersButtonDescription": "Characters",
			"buttonValidateAdvEditor": "Validate and send message",
			"bookmark": "Favorite",
			"bookmarkDescription": "Bookmark this thread.",
			"invite": "Invite",
			"inviteDescription": "Invite players to this channel.",
			"leave": "Quit",
			"leaveDescription": "Exit the channel.",
			"refresh": "Refresh",
			"refreshDescription": "Refresh channel.",
			"reply": "Reply",
			"replyDescription": "Reply to this message.",
			"report": "Report",
			"loadMoreMessages": "Load more messages",
			"markChannelAsRead": "Mark channel as read",
			"exportChannelAsClipboard": "Clipboard 📋",
			"exportChannelAsClipboardDescription": "Copy the discussion to the clipboard.",
			"exportChannelAsPDF": "PDF file 🖨️",
			"exportChannelAsPDFDescription": "Create a PDF file containing the discussion.",
			"unbookmark": "No more favorite",
			"unbookmarkDescription": "Remove this thread from your favorites."
		},
		"exploration": {
			"newStep": "New step"
		},
		"commanderOrderPanel": {
			"title": "Mission",
			"tips": "You are the ship's *Commander* and you have the power to *command missions* from your comrades. You can choose who to send the mission you've freely decided on, and they'll receive :pa: if they accept. But there's no guarantee that your comrade will respect your orders..."
		},
		"ComManagerAnnouncementPanel": {
			"title": "General Announcement",
			"tips": "As a *Comms Manager*, you can make a general announcement. //// All your teammates will be **notified**, and the announcement will remain in the :tip: **Tips** tab. Each new announcement replaces the previous one."
		},
		"popUp": {
			"close": "Close",
			"ok": "I understand",
			"goThere": "Go there",
			"newNews": "New news has been published!"
		}
	},
	"newsPage": {
		"publishedAt": "Published at ",
		"updatedAt": "Updated at "
	},
	"homePage": {
		"joinUs": "Join us !",
		"play": "Play now !",
		"synopsis": "You're about to wake up aboard the Daedalus with 15 other rebels. Like you, they are fleeing the <em>Mush</em>, a parasitic fungus which is ravaging Earth and threatening Humanity.",
		"followUs": "Follow us:",
		"latestNews": "Last news:",
		"seeAllNews": "Read all news"
	},
	"errors": {
		"details": {
			"class": "Class:",
			"details": "Details:",
			"method": "Method:",
			"params": "Parameters:",
			"url": "URL :"
		},
		"status": {
			"401": "401 Unauthorized",
			"403": "403 Forbidden",
			"404": "404 Resource not found",
			"409": "409 Conflict",
			"422": "422 Unprocessable Entity",
			"500": "500 Internal server error",
			"502": "502 Bad Gateway",
			"503": "503 Service unavailable"
		},
		"badGateway": "The proxy has received an invalid response. This error is most likely due to server synchronization: try again later!",
		"cannotAccessExploration": "You're not allowed to see this expedition. It's a private ship, aren't you ashamed?",
		"consultCommunity": "If the problem persists, please check with the community on <a href='https://discord.gg/Jb8Nwjck6r'>Discord</a> or the <a href='https://eternaltwin.org/forum/sections/b5ddc792-0738-4289-9818-c2f1f029c8b1'>forum</a>.",
		"Daedalus changing cycle": "Daedalus is changing cycle.",
		"gameInMaintenance": "The game is under maintenance, please come back later!",
		"neronMessage": "<strong>NERON</strong>: A thousand apologies. My designer programmed me with love, but nobody's perfect. An error occurred while trying to load the requested page... If the site is unavailable, please try again in a few minutes. ",
		"Not Found": "The requested resource has not been found.",
		"player cannot reach parameter": "You cannot reach the target of the action (is it still in the room?).",
		"problem": "There was a problem processing your request.",
		"reportToDevs": "Please report this error to the developers, with details of how it occurred.",
		"title": "ERROR",
		"You have been banned!": "As a result of your actions, you have been banned by a moderator.\nIf you think this is a mistake, please open a ticket on the <a href='https://discord.gg/Jb8Nwjck6r', target='_blank'>Eternaltwin Discord</a>."
	},
	"metaSeo": {
		"description": "eMush is a remake of Mush, the award-winning survival and investigation game from Motion Twin (Twinoid). Dive into a thrilling space opera that blends survival, social deduction and role-playing in a unique multiplayer experience!",
		"og:title": "eMush - Cooperative multiplayer game: betrayal and survival in space!",
		"og:description": "eMush is a remake of Mush, the award-winning survival and investigation game from Motion Twin (Twinoid). Dive into a thrilling space opera that blends survival, social deduction and role-playing in a unique multiplayer experience!"
	},
	"moderation": {
		"banner": {
			"players": "Players",
			"users": "Users"
		},
		"filters": {
			"cycle": "Cycle",
			"day": "Day",
			"endDate": "End date",
			"date": "Date",
			"logContent": "Log",
			"logContentDescription": "Name of the log to search for. For the moment, you need to enter the log code (given in brackets). In the future, pre-selected filters (aggressive actions, mush actions...) will be available.",
			"messageAuthor": "Author of the message",
			"messageContent": "Message content",
			"room": "Room",
			"roomDescription": "Room for which you want to see the logs. For now, you need to enter the room code (shown in brackets).",
			"startDate": "Start date"
		},
		"player": {
			"playedBy": "Played by",
			"mush": "Mush",
			"human": "Human",
			"banned": "Banned",
			"notBanned": "Not banned",
			"alive": "Alive",
			"dead": "Death"
		},
		"theEndPage": {
			"editMessage": "Edit",
			"editMessageDescription": "Replace this message with a warning from NERON.",
			"hideMessage": "Hide",
			"hideMessageDescription": "Hide this message: it will only be visible to the author and moderators.",
			"messageIsHidden": "Hidden",
			"messageIsHiddenDescription": "This message is hidden. It is only visible to its author and moderators."
		},
		"playerList": {
			"gameStatuses": {
				"all": "Without distinction",
				"in_game": "In game",
				"finished": "Non-validated death",
				"closed": "Validated death"
			},
			"id": "Player's identifier",
			"gameStatus": "Player's status",
			"daedalusId": "Daedalus identifier",
			"characterName": "Played character",
			"user": "User"
		},
		"userList": {
			"userId": "User identifier",
			"roles": "Roles"
		},
		"sanction": {
			"id": "Number",
			"author": "Author",
			"target": "Target",
			"reason": "Reason",
			"evidence": "Complained message",
			"date": "Date",
			"actions": "Actions",
			"delete": "Delete",
			"ban_user": "Ban",
			"banDescription": "Ban this user from joining ships (you can unban him at any time).",
			"quarantineAndBan": "Quarantine and ban",
			"quarantineAndBanDescription": "Quarantine and ban this player. He'll leave the game and won't be able to join others.",
			"quarantine_player": "Quarantine",
			"quarantineDescription": "Quarantine this player, who will leave the game.",
			"warning": "Warning",
			"warningDescription": "Give this user a warning.",
			"delete_message": "Delete message",
			"deleteDescription": "This action deletes the message and replaces it with a message from NERON.",
			"delete_end_message": "Delete end message",
			"hide_end_message": "Hide end message",
			"allTypes": "All sanctions",
			"until": "until",
			"banned": "Banned",
			"report": "Complaint",
			"report_abusive": "Abusive complaint",
			"report_processed": "Complaint processed",
			"alive": "ALIVE",
			"name": "Sanction",
			"showMore": "Display"
		},
		"reason": {
			"multi_account": "Multiaccount",
			"mush_play_against_team": "Mush foul play",
			"killing_spree": "Killing spree",
			"foul_play": "Foul play",
			"suicide": "Suicide",
			"hate_speech": "Hate speech",
			"flood": "Flood",
			"wrong_language": "Foreign language",
			"exploit": "Bug exploit",
			"exploit_incentive": "Incitement to exploit bugs",
			"leaking_private_information": "Leaking private information",
			"allReasons": "All reasons"
		},
		"durations": {
			"permanent": "Permanent",
			"1_day": "1 day",
			"2_day": "2 days",
			"3_day": "3 days",
			"1_week": "1 week",
			"2_week": "2 weeks",
			"3_week": "3 weeks",
			"1_month": "1 month",
			"2_month": "2 months",
			"3_month": "3 months"
		},
		"sanctionDetail": {
			"sanction": "Sanction details",
			"report": "Complaint details",
			"user": "Username:",
			"player": "Played character:",
			"endDate": "Sanction end:",
			"startDate": "Sanction start:",
			"reportDate": "Complaint date:",
			"date": "Date : ",
			"author": "Moderator:",
			"message": "Message :",
			"sanctionType": "Sanction type:",
			"reason": "Reason:",
			"evidence": "Reported message:",
			"today": "Today",
			"yesterday": "Yesterday",
			"to": "at"
		},
		"report": {
			"name": "Report",
			"popUpTitle": "Reporting form",
			"description": "Report problematic behavior to moderation.",
			"submit": "Filing a complaint",
			"choosePlayer": "Select teammate",
			"playerMessage": "Description of the situation:",
			"player": "Player concerned by the complaint",
			"seeContext": "See in context",
			"message": "If you feel that a teammate is violating eMush's rules, please make sure you have selected a message illustrating the problem and explain in detail the reason for your complaint.",
			"commanderMission": "Commander mission",
			"comManagerAnnouncement": "General announcement"
		},
		"actions": {
			"name": "Actions",
			"suspend": "Suspend the sanction",
			"delete": "Delete the sanction",
			"archive": "Archive complaint",
			"archiveDescription": "Archive the complaint and mark it as processed",
			"close": "Abusive complaint",
			"closeDescription": "Close complaint and mark as abusive"
		},
		"reportToAddress": "Complaints to be handled",
		"reduce": "Reduce",
		"showAll": "Show all sanctions",
		"sanctionsFor": "{username}'s sanctions list",
		"reportsFor": "List of complaints sent against {username}.",
		"isSanctionActive": "Active sanctions",
		"sanctionType": "Sanction type",
		"sanctionReason": "Reason",
		"adminMessage": "Moderation message",
		"startDate": "Start date",
		"endDate": "End date",
		"duration": "Duration",
		"sanctionList": "Sanction list",
		"confirmSanction": "Confirm",
		"chooseReason": "Choose a reason",
		"alivePlayersFilter": "Player's status:",
		"mushPlayersFilter": "Display only Mush players",
		"generalChannel": "General channel",
		"goToPlayerDetails": "See player details",
		"goToUserProfile": "View user profile",
		"loadMushChannel": "Load Mush channel",
		"loadPrivateChannels": "Load private channels",
		"loadPublicChannel": "Load public channel",
		"logs": "Logs",
		"mushChannel": "Mush channel",
		"nothingToDisplay": "Nothing to display.",
		"privateChannel": "Private channel",
		"unban": "Unban",
		"unbanDescription": "Unban this user so that they can rejoin a ship again.",
		"reloadData": "Reload data",
		"reloadDataDescription": "Reload page data. Note: there is no need to use this button in most cases. Data is automatically reloaded each time a filter is changed.",
		"searchByCharacter": "Search for a character :",
		"searchByDaedalusId": "Search for a Daedalus by ID :",
		"searchByUsername": "Search for a user :",
		"suspendSanction": "Suspend sanction",
		"suspendSanctionDescription": "Suspend sanction. The end date is set to the current date. The sanction remains in the user's history.",
		"removeSanction": "Delete sanction",
		"removeSanctionDescription": "Delete sanction. The sanction is completely removed from the user's history."
	},
	"rules": {
		"title": "Rules of eMush",
		"introduction": {
			"textIntro": "eMush is a community game offering numerous ways of communication and means of acting. The aim of these rules is to allow games to run smoothly and to ensure a pleasant game experience to all the players. The rules stated here are not meant to be exhaustive and are likely to evolve along with the development of the game. Players will be informed of each update via a notification on the Eternaltwin Discord server.",
			"alphaLeeway": "The rules marked by this icon signal that a certain leeway is applied during the period of open alpha tests (see last paragraph).",
			"lastUpdated": "<em>Last updated : June, 15th 2025</em>"
		},
		"communication": {
			"title": "Communication",
			"introText": "The rules concerning communication apply to all places allowing the player to communicate by sending messages: main channel, private channels, Mush channel, missions, general announcements, messages at the end of ships. These messages can all be subjected to moderation after the facts, at the discretion of the game’s admins and moderators according to the following guidelines:",
			"mandatoryCommunication": "<strong>Communication</strong>: Communication is a fundamental pillar of the game. To achieve your team’s objective, it is essential to share information with your teammates in order to organize and coordinate.",
			"courtesy": "<strong>Courtesy</strong>: Communication being an essential part of the game, players are allowed a lot of leeway as to the words used, and the aim here is not to list the forbidden words exhaustively. However, in order to guarantee a sound and inclusive game atmosphere to all players, any form of explicit language, intolerance, hatred, discrimination, harassment, violence is strictly prohibited.",
			"spokenLanguage": "<strong>Spoken language</strong>: The player must be able to communicate easily in the language of the server.",
			"flood": "<strong>Flood</strong>: Players must not abuse the communication systems provided. In particular, flooding is prohibited, and special attention should be paid to spelling and syntax. Any advertising for a site or service external to Eternaltwin is forbidden."
		},
		"behaviour": {
			"title": "Behaviour",
			"introText": "This section is not meant to constitute an exhaustive list of tolerated or forbidden behaviours, but to give an idea of behaviours that go against the spirit of the game.",
			"multiAccounts": "<strong>Multi-accounts</strong>: It is forbidden to have more than one account per person on the eMush game. Lending, giving or sharing accounts is also forbidden.",
			"spoilingHuman": "<strong>Human griefing</strong>: As a human, it is forbidden to seriously ruin the other players’ playing experience by committing deliberate and conscious actions threatening to impede the objective of the human side. In particular, killing another human without justification or consultation with your teammates is prohibited.",
			"spoilingMush": "<strong>Mush griefing</strong>: As a Mush, it is forbidden to deliberately harm your own side, including but not limited to revealing the identity of the Mush, either yourself or the other Mush. However, there is an exception for a Mush healed by the serum. This player may choose to reveal, or not, the other Mushs once they have switched teams.",
			"mushCooperation": "<strong>Cooperation between Mushs and humans</strong>: It is forbidden to cooperate with humans as Mush, and vice versa. Changing teams is also prohibited: a human must not willingly allow themselves to be infected or help a Mush destroy the ship. A Mush must not attempt to become human and must do everything in their power to avoid receiving the serum.",
			"suicide": "<strong>Suicide</strong> : It is forbidden to voluntarily leave a game, either actively or passively, by exploiting the game's mechanisms."
		},
		"sanctionsAppeal": {
			"title": "Sanctions and appeal",
			"sanctionText": "Any failure to follow these rules regarding communication or behaviour can be subjected to a sanction, ranging from a warning to banning from the game with immediate effect, temporarily or not.",
			"appealText": "Players are notified of their sanction via a message on the main page of the game. From then on, they have the possibility to appeal the sanction by opening a ticket on the <a href='https://discord.gg/ERc3svy'>EternalTwin Discord server</a> and explaining their case. Moderators have special tools at their disposal as well as access to all messages and details of a game.",
			"allPlatformText": "In case of repeat offences or of behaviour that is considered serious enough, the sanctions can be applied to all the games and functionalities of the Eternaltwin platform."
		},
		"alphaRules": {
			"title": "Rules specific to the open alpha",
			"introText": "In the aim of contributing actively to the development and testing of the game, allowances are made to the rules marked by this icon in the preceding rules. These allowances are applicable until the opening of the game in a new phase, and players will be notified of any modification.",
			"tests": "<strong>Testing facilitation</strong> : The aim of the alpha phase is to involve the community in the development of the game, to obtain feedback and bug reports. To this end, any bug must be reported immediately to the development team without being exploited, and it remains forbidden to behave in a way that seriously harms the game experience of other players. To find out what features are available, please consult the <a href='https://discord.com/channels/693082011484684348/693144970433003540/1079173112848994304'>roadmap</a>.",
			"spokenLanguage": "<strong>Allowances on the spoken language</strong>: During the development phases, the frequentation of the various servers can be unequal. In that context, players not having knowledge of the French language are allowed to join games on the French server. It is then recommended to notify the crew and to make particular efforts to communicate with them.",
			"cooperation": "<strong>Allowances on the cooperation between humans and Mush</strong>: In order to test the game’s functionalities, the “investigation” part of the Mush game is not expected to be respected. In particular, cooperation between humans and Mush is tolerated in order to test game mechanisms.",
			"endText": "Note that all rules not marked by the icon remain fully applicable during the alpha period."
		},
		"newRulesPopUp": {
			"title": "Information",
			"message": "The game rules have been updated: please accept them to continue playing.",
			"ok": "I understand!"
		},
		"iHaveReadRules": "I confirm that I have read the rules",
		"accept": "Accept the rules",
		"thanks": "Thank you for accepting the eMush rules!"
	},
	"apiResponse": {
		"Complaint sent successfully": "Your complaint has been sent successfully."
	},
	"charPanel": {
		"apprenticeship": "Apprenticeship",
		"availableSlot": "Available slot",
		"chooseNewSkill": "Click here to choose a **new skill** for {character} !",
		"skillChoiceTitle": "Skill selection",
		"skillChoiceDescription": "Choose **a skill** to acquire:",
		"mushGenome": "Mush genome",
		"displayYourHumanSkills": "Click here to view your **human skills**.",
		"displayYourMushSkills": "Click here to view your **Mush skills**."
	}
}