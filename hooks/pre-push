#!/bin/sh

EXPECTED_PHP_VERSION="8.3"

check_local_commands() {
    if ! command -v php >/dev/null 2>&1; then
        echo "Error: 'php' command not found. Please install PHP $EXPECTED_PHP_VERSION or ensure it's in your PATH."
        return 1
    fi

    php_version=$(php -r "echo PHP_MAJOR_VERSION . '.' . PHP_MINOR_VERSION;")
    if [ "$php_version" != $EXPECTED_PHP_VERSION ]; then
        echo "Error: PHP version $EXPECTED_PHP_VERSION is required. Current version is $php_version : please use the right version of PHP, or Docker."
        return 1
    fi

    if ! command -v yarn >/dev/null 2>&1; then
        echo "Error: 'yarn' command not found. Please install Yarn or ensure it's in your PATH."
        return 1
    fi
}

check_containers_are_launched() {
    if ! docker ps --format '{{.Names}}' | grep -q 'mush-php' || ! docker ps --format '{{.Names}}' | grep -q 'mush-front'; then
        echo "Error: mush-php or mush-front Docker containers are not running. If you use Docker installation, run 'make docker-start' to fix this."
        return 1
    fi
}

run_local_commands() {
    check_local_commands || return 1

    cd Api
    vendor/bin/php-cs-fixer check --diff || return 1
    vendor/bin/phpcs --standard=PSR1 src tests -p -n --ignore=src/*/DataFixtures/*,src/*/ConfigData/* || return 1
    vendor/bin/psalm || return 1
    vendor/bin/phpmd src text phpmd.xml --exclude src/*/DataFixtures/*,src/*/ConfigData/* --ignore-errors-on-exit || return 1
    cd ..

    cd App
    yarn lint --no-fix || return 1
    cd ..
    return 0
}

run_docker_commands() {
    check_containers_are_launched || return 1

    docker compose -f docker/docker-compose.yml exec -T -u dev mush-php vendor/bin/php-cs-fixer check --diff || return 1
    docker compose -f docker/docker-compose.yml exec -T -u dev mush-php vendor/bin/phpcs --standard=PSR1 src tests -p -n --ignore=src/*/DataFixtures/*,src/*/ConfigData/* || return 1
    docker compose -f docker/docker-compose.yml exec -T -u dev mush-php vendor/bin/psalm || return 1
    docker compose -f docker/docker-compose.yml exec -T -u dev mush-php vendor/bin/phpmd src text phpmd.xml --exclude src/*/DataFixtures/*,src/*/ConfigData/* --ignore-errors-on-exit || return 1
    docker compose -f docker/docker-compose.yml exec -T -u node mush-front yarn lint --no-fix || return 1
    return 0
}

run_docker_commands || run_local_commands
