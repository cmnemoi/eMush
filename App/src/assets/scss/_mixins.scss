@use "sass:color";

/* VARIABLES */

$brightCyan: #c2f3fc;
$lightCyan: #a6eefb;
$cyan: #01C3DF;
$blue: #2081e2;
$slightlyDeepBlue: #122270;
$deepBlue: #090a61;
$greyBlue: #3a6aab;

$mushRed: rgba(255, 66, 89, 1);
$red: #cf1830;
$pink: #d24781;
$deepGreen: #48A209;
$green: #84e100;

$notifBlue: #379BFF;
$lightOrange: #fe9c00;
$orange: #fe7d00;

$darkGrey: #111317;
$mediumGrey: #3b4151;
$lightGrey: #B7B9C6;
$brightBlue: #379BFF;
$lightBlue: #409FFF;
$darkBlue: #0482FF;

$font-default: "eKanit", "Segoe UI", "Lucida Grande", "Trebuchet MS", Arial, "lucida sans unicode", sans-serif;
$font-days-one: "Days-One", $font-default;
$font-pixel-square: "Pixel-Square", $font-default;

$breakpoint-mobile-l: 425px;
$breakpoint-desktop-m: 768px;
$breakpoint-desktop-l: 1080px;


$face-position: //for the chars portraits, defines the position of the face in reference to the top left corner
    "andie"    56% 37%,
    "chao"     63% 28%,
    "chun"     52% 24%,
    "derek"    39% 24%,
    "eleesha"  47% 32%,
    "finola"   50% 30%,
    "frieda"   46% 35%,
    "gioele"   47% 26%,
    "hua"      50% 28%,
    "ian"      49% 26%,
    "janice"   55% 35%,
    "jin_su"      50% 25%,
    "kuan_ti"     52% 20%,
    "paola"    70% 37%,
    "raluca"   40% 22%,
    "roland"   43% 28%,
    "stephen"  51% 29%,
    "terrence" 67% 30%,
;

/* MIXINS */


/* Add a clip-path with bezel-cuts for each corners of the element.
Corners values stand clockwise starting from top left. Missing values in @include will inherit previous corner value. */
@mixin corner-bezel($topleft: 0, $topright: -1, $bottomright: -1, $bottomleft: -1) {
    @if $topright    == -1 { $topright    : $topleft; } //repeat corner value if not specified
    @if $bottomright == -1 { $bottomright : $topright; }
    @if $bottomleft  == -1 { $bottomleft  : $bottomright; }

    $calctopright    : 100% ; //defines calculated values
    $calcbottomright : 100% ;
    $calcbottomleft  : 100% ;

    @if $topright    != 0 { $calctopright    : calc(100% - #{$topright}  ) } ; //translates calc values to (100% - n) if not 0
    @if $bottomright != 0 { $calcbottomright : calc(100% - #{$bottomright}) } ;
    @if $bottomleft  != 0 { $calcbottomleft  : calc(100% - #{$bottomleft} ) } ;

    clip-path:
        polygon(
            $topleft 0,
            $calctopright 0,
            100% $topright,
            100% $calcbottomright,
            $calcbottomright 100%,
            $bottomleft 100%,
            0 $calcbottomleft,
            0 $topleft
        );
}


/* Style an element to make it a button, including hover effect.
Editable values stand for font-size, font-weight, and font-variant. Keep empty for default styles.
Disabling the button (or adding the class ".disabled" to the element) will strike-through it.
Adding the class ".flashing" to the element will will animate its border to increase visibility. */
@mixin button-style ($font-size: 1rem, $font-weight: 700, $font-variant: small-caps) {
    $color: rgb(0, 116, 223);
    $hover-color: rgb(0, 160, 233);
    $border-color: rgb(12, 18, 13);
    $text-shadow-color: rgb(21, 39, 60);

    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    margin: 1px;
    padding: 1px 4px 3px;
    border-radius: 1px;
    color: white;
    font-size: $font-size;
    font-weight: $font-weight;
    font-variant: $font-variant;
    letter-spacing: 0.05em;
    text-decoration: none;
    text-align: center;
    text-shadow: 0 0 4px $text-shadow-color, 0 0 4px $text-shadow-color;
    box-shadow: 0 0 0 1px $border-color;
    background: $color;
    background:
        linear-gradient(
            0deg,
            color.adjust(color.adjust($color, $hue: 13deg), $lightness: -5.49%) 2%,
            $color 6%,
            $color 46%,
            color.adjust(color.adjust($color, $hue: -6deg), $lightness: 1.18%) 54%,
            color.adjust(color.adjust($color, $hue: -6deg), $lightness: 1.18%) 94%,
            color.adjust(color.adjust($color, $saturation: -25%), $lightness: 15.49%) 96%
        );

    @media screen and (max-width: $breakpoint-desktop-m) { font-size: calc($font-size * 0.85); }

    &:hover,
    &:focus {
        background: $hover-color;
        background:
            linear-gradient(
                0deg,
                color.adjust(color.adjust($hover-color, $hue: 14deg), $lightness: -3.92%) 2%,
                $hover-color 6%,
                $hover-color 46%,
                color.adjust(color.adjust($hover-color, $hue: -4deg), $lightness: 0.78%) 54%,
                color.adjust(color.adjust($hover-color, $hue: -4deg), $lightness: 0.78%) 94%,
                color.adjust(color.adjust($hover-color, $saturation: -18.1%), $lightness: 13.14%) 96%
            );
    }

    img {
        position: relative;
        top: -.1em;
        padding: 0 0.3em;
    }

    s { text-decoration: inherit; }
    
    &.disabled, &:disabled { opacity: 0.5; text-decoration: line-through; cursor: not-allowed;}

    &.flashing {
        animation: flashing-effect 1.3s ease-in-out infinite;
        
        @keyframes flashing-effect {
            0% {box-shadow: 0 0 0 1px $border-color;}
            15% {box-shadow: 0 0 0 1px white;}
            30% {box-shadow: 0 0 0 1px $border-color;}
        }
    }
}



/* Style an element to make it look like an inventory slot.
Width and height values should not be changed unless in very specific situations.
Inventory slots with .empty class will have no interactive styling. */
@mixin inventory-slot($width: 54px, $height: 54px) {
    $box-shadow: 0 0 8px 2px inset rgb(17, 56, 128);
    $active-color: rgb(153, 255, 153);

    position: relative;
    width: $width;
    height: $height;
    min-width: $width; // needed for flexbox
    min-height: $height;
    margin: 1px;
    border: 1px solid rgb(64, 119, 181);
    border-radius: 3px;
    background: $greyBlue;
    box-shadow: $box-shadow;

    span.qty {
        pointer-events: none;
        position: absolute;
        bottom: 0;
        right: 0;
        margin: 2px 5px;
        font-weight: bold;
        font-size: 1.18rem;
        color: white;
        text-shadow: 0 0 3px black, 0 0 3px black;
    }

    // add a pseudo-element to display a white/green border during focus
    &:not(.empty) {
        &:hover::before,
        &:focus::before,
        &:active::before {
            content: "";
            position: absolute;
            pointer-events: none;
            z-index: 5;
            width: 100%;
            height: 100%;
        }

        &:hover::before {
            border: 1px solid white;
        }
    }
}

/* PLACEHOLDERS */

// Tips for Terminals, retracted by default and extend on click
%retracted-tips {
    position: relative;
    margin: .35em 0;
    padding: .25em;
    cursor: pointer;
    background: $lightCyan;
    border: 1px solid $green;
    border-radius: 3px;

    & * { cursor: pointer; }

    input {
        position: absolute;
        z-index: 2;
        right: .8em;
        top: .5em;
        opacity: 0;
    }

    & > label {
        display: block;
        overflow: hidden;
        opacity: .5;
        height: 1.55em;
        padding-bottom: .5em;
        line-height: 1.35em;
        font-style: italic;

        em.red {
            font-style: normal;
            color: $red;
        }

        &::before {
            content: "";
            float: right;
            width: 21px;
            height: 21px;
            background: url("/src/assets/images/comms/more.png") no-repeat center;
        }
    }

    input:checked ~ label {
        opacity: 1;
        height: auto;

        &::before {
            background-image: url("/src/assets/images/comms/less.png");
        }
    }

    .expand {
        display: none;
        position: absolute;
        top: -1.5em;
        right: .8em;
        padding: .2em .5em;
        border-radius: 5px 5px 0 0;
        background: $green;
        font-size: .75em;
        text-transform: uppercase;
        letter-spacing: .05em;
    }
}

// Terminal sections style with left-side border and small h3
%terminal-section {
    position: relative;
    flex-direction: row;
    align-items: center;
    margin-bottom: .8em;
    background-color: $lightCyan;
    background-repeat: no-repeat;
    background-position: right bottom;
    border-top: 3px solid #89e8fa;
    border-left: 3px solid $green;

    h3 {
        position: absolute;
        top: 0;
        left: 0;
        margin: 0;
        padding: .25em 2.5em .25em .5em;
        background: #89e8fa;
        text-align: center;
        font-size: 1em;
        letter-spacing: 0.03em;
        font-weight: normal;
        text-transform: uppercase;
        line-height: 1em;

        // @include corner-bezel(0, 0, 1.5em, 0);
        clip-path: polygon(0 0, 100% 0, 100% 0, 100% calc(100% - 1.5em), calc(100% - 1.5em) 100%, 0 100%, 0 100%, 0 0);
    }
}


//in-game scrollbar styling, 8px thick only with emush colors
%game-scrollbar {
    --scrollbarBG: white;
    --thumbBG: rgba(0, 116, 223, 1);
    --border-radius: 6px;

    scrollbar-width: thin;
    scrollbar-color: var(--thumbBG) var(--scrollbarBG);

    &::-webkit-scrollbar {
        width: 8px;
        border-radius: var(--border-radius);
    }

    &::-webkit-scrollbar-track {
        background: var(--scrollbarBG);
        border-radius: var(--border-radius);
    }

    &::-webkit-scrollbar-thumb {
        background-color: var(--thumbBG);
        border-radius: var(--border-radius);
    }

    &::-webkit-scrollbar-corner {
        background-color: var(--thumbBG);
    }
}