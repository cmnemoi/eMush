stages:
  - check
  - build
  - test
  - release

.php_template: &php_template
  image: registry.gitlab.com/eternaltwin/mush/mush/api:latest
  cache:
    paths:
      - "Api/vendor/"
  before_script:
    - php -v
    - cd Api
    # Install all project dependencies
    - composer install
    - cp .env.gitlab .env

.php_with_db_template: &php_with_db_template
  extends: .php_template
  services:
    - postgres:15.1-alpine
  variables:
    POSTGRES_DB: emush_test
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: "password"
  before_script:
    - php -v
    - cd Api
    # Install all project dependencies
    - composer install
    - cp .env.gitlab .env.test
    - cp .env.gitlab .env
    - bin/console doctrine:schema:update -f
    - bin/console doctrine:fixtures:load -n --env=test
    - openssl genpkey -out config/jwt/private.pem -aes256 -algorithm rsa -pkeyopt rsa_keygen_bits:4096 -pass pass:mush
    - openssl pkey -in config/jwt/private.pem -out config/jwt/public.pem -pubout -passin pass:mush
    - chmod go+r config/jwt/private.pem

.node_template: &node_template
  image: node:18
  cache:
    paths:
      - node_modules/
  before_script:
    - cd App
    - yarn install

 # dummy job to check if the pipeline is valid or if there is no job to run
check:
  stage: check
  image: alpine:latest
  script:
    - echo "Pipeline is valid"

build-front:
  stage: build
  needs: 
    - job: check
  <<: *node_template
  script:
    - yarn build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes: ["App/**/*.vue", "App/**/*.ts", "App/**/*.scss", "App/**/*.css"]
    - if: '$CI_COMMIT_BRANCH == "develop"'

api-test:
  <<: *php_with_db_template
  stage: test
  needs: 
    - job: check
    - job: build-front
      optional: true
  script:
    - php vendor/bin/codecept run
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes: ["Api/**/*.php"]
    
api-lint:
  <<: *php_template
  stage: test
  needs:
    - job: check
    - job: build-front
      optional: true
  script:
    - ./linters.sh
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes: ["Api/**/*.php", "Api/**/*.xlf"]
    

api-test-develop:
  <<: *php_with_db_template
  stage: test
  needs: 
    - job: check
    - job: build-front
      optional: true
  script:
    - echo "[PHP] memory_limit = -1" >> /usr/local/etc/php/conf.d/docker-php-memlimit.ini
    - pecl install xdebug && docker-php-ext-enable xdebug
    - php --ini memory_limit=-1
    - XDEBUG_MODE=coverage php vendor/bin/codecept run --xml --html --coverage --coverage-html --no-colors
  coverage: '/^\s+Lines:\s+(\d+\.\d+)%/'
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - Api/tests/_output
    # make the report available in Gitlab UI. see https://docs.gitlab.com/ee/ci/unit_test_reports.html
    reports:
      junit: Api/tests/_output/report.xml
  # only:
  #   - develop

front-lint:
  <<: *node_template
  stage: test
  needs: 
    - job: check
    - job: build-front
  script:
    - yarn lint --no-fix
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes: ["App/**/*.vue", "App/**/*.ts", "App/**/*.scss", "App/**/*.css"]
    
front-test:
  <<: *node_template
  stage: test
  needs: 
    - job: check
    - job: build-front
  script:
    - yarn test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes: ["App/**/*.vue", "App/**/*.ts", "App/**/*.scss", "App/**/*.css"]
    - if: '$CI_COMMIT_BRANCH == "develop"'
    
# Generate a CHANGELOG.md file and create a new release on GitLab while merging to master
release:
  image: node:latest
  stage: release
  needs: 
    - job: check
    - job: api-test-develop
  before_script:
    - npm install -g semantic-release @semantic-release/commit-analyzer @semantic-release/changelog @semantic-release/release-notes-generator @semantic-release/gitlab
  variables:
    GIT_AUTHOR_NAME: AI-NERON
    GIT_AUTHOR_EMAIL: $NERON_EMAIL
    GIT_COMMITTER_NAME: AI-NERON
    GIT_COMMITTER_EMAIL: $NERON_EMAIL
    GITLAB_TOKEN: $semantic_release_token
    version: '${version}'
  artifacts:
    expire_in: 1 week
    paths:
      - CHANGELOG.md
  script:
    - semantic-release --branches master -t $version -p @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/gitlab 
  only:
    - master