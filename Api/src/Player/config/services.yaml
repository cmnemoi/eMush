
services:

  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  Mush\Player\:
    resource: '../'
    exclude:
      - '../DependencyInjection/'
      - '../Entity/'
      - '../Kernel.php'
      - '../Tests/'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  Mush\Player\Controller\:
    resource: '../Controller/'
    tags: ['controller.service_arguments']

  Mush\Player\ParamConverter\PlayerCreateRequestConverter:
    tags:
      - { name: 'request.param_converter', converter: PlayerCreateRequestConverter }

  Mush\Player\Repository\PlayerInfoRepositoryInterface: '@Mush\Player\Repository\PlayerInfoRepository'
  Mush\Player\Repository\PlayerRepositoryInterface: '@Mush\Player\Repository\PlayerRepository'
  Mush\Player\Repository\PlayerNotificationRepositoryInterface: '@Mush\Player\Repository\PlayerNotificationRepository'
