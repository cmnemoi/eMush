#!/bin/sh

EXPECTED_PHP_VERSION="8.3"

check_local_commands() {
    if ! command -v php >/dev/null 2>&1; then
        echo "Error: 'php' command not found. Please install PHP $EXPECTED_PHP_VERSION or ensure it's in your PATH."
        return 1
    fi

    php_version=$(php -r "echo PHP_MAJOR_VERSION . '.' . PHP_MINOR_VERSION;")
    if [ "$php_version" != "$EXPECTED_PHP_VERSION" ]; then
        echo "Error: PHP version $EXPECTED_PHP_VERSION is required. Current version is $php_version : please use the right version of PHP."
        return 1
    fi

    if ! command -v yarn >/dev/null 2>&1; then
        echo "Error: 'yarn' command not found. Please install Yarn or ensure it's in your PATH."
        return 1
    fi
}

check_containers_are_launched() {
    if ! docker ps --format '{{.Names}}' | grep -q 'mush-php' || ! docker ps --format '{{.Names}}' | grep -q 'mush-front'; then
        echo "Error: mush-php or mush-front Docker containers are not running. Skipping Docker commands."
        return 1
    fi
}

run_local_commands() {
    check_local_commands || return 1

    # Run php-cs-fixer if .php files are modified
    if git diff --name-only --cached | grep -E '\.php$'; then
        echo 'Running php-cs-fixer'
        cd Api && php vendor/bin/php-cs-fixer fix && cd .. || return 1
    fi

    # Run eslint if .vue, .js, .ts, .scss, or .css files are modified
    if git diff --name-only --cached | grep -E '\.(vue|js|ts|scss|css)$'; then
        echo 'Running eslint'
        cd App && yarn lint && cd .. || return 1
    fi

    return 0
}

run_docker_commands() {
    check_containers_are_launched || return 1

    # Run php-cs-fixer if .php files are modified
    if git diff --name-only --cached | grep -E '\.php$'; then
        echo 'Running php-cs-fixer'
        docker compose -f docker/docker-compose.yml exec -T -u dev mush-php php vendor/bin/php-cs-fixer fix || return 1
    fi

    # Run eslint if .vue, .js, .ts, .scss, or .css files are modified
    if git diff --name-only --cached | grep -E '\.(vue|js|ts|scss|css)$'; then
        echo 'Running eslint'
        docker compose -f docker/docker-compose.yml exec -T -u node mush-front yarn lint || return 1
    fi
    return 0
}

run_docker_commands || run_local_commands
